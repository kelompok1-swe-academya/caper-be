// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bcrypt/bcrypt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/bcrypt/bcrypt.go -destination=pkg/bcrypt/mock/bcrypt_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBcryptInterface is a mock of BcryptInterface interface.
type MockBcryptInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBcryptInterfaceMockRecorder
	isgomock struct{}
}

// MockBcryptInterfaceMockRecorder is the mock recorder for MockBcryptInterface.
type MockBcryptInterfaceMockRecorder struct {
	mock *MockBcryptInterface
}

// NewMockBcryptInterface creates a new mock instance.
func NewMockBcryptInterface(ctrl *gomock.Controller) *MockBcryptInterface {
	mock := &MockBcryptInterface{ctrl: ctrl}
	mock.recorder = &MockBcryptInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBcryptInterface) EXPECT() *MockBcryptInterfaceMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockBcryptInterface) Compare(password, hashed string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", password, hashed)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockBcryptInterfaceMockRecorder) Compare(password, hashed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockBcryptInterface)(nil).Compare), password, hashed)
}

// Hash mocks base method.
func (m *MockBcryptInterface) Hash(plain string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", plain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockBcryptInterfaceMockRecorder) Hash(plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockBcryptInterface)(nil).Hash), plain)
}
