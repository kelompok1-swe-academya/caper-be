// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/jwt/jwt.go -destination=pkg/jwt/mock/jwt_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jwt "github.com/ahargunyllib/hackathon-fiber-starter/pkg/jwt"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtInterface is a mock of JwtInterface interface.
type MockJwtInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJwtInterfaceMockRecorder
	isgomock struct{}
}

// MockJwtInterfaceMockRecorder is the mock recorder for MockJwtInterface.
type MockJwtInterfaceMockRecorder struct {
	mock *MockJwtInterface
}

// NewMockJwtInterface creates a new mock instance.
func NewMockJwtInterface(ctrl *gomock.Controller) *MockJwtInterface {
	mock := &MockJwtInterface{ctrl: ctrl}
	mock.recorder = &MockJwtInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtInterface) EXPECT() *MockJwtInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJwtInterface) Create(userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockJwtInterfaceMockRecorder) Create(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJwtInterface)(nil).Create), userID)
}

// Decode mocks base method.
func (m *MockJwtInterface) Decode(tokenString string, claims *jwt.Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", tokenString, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockJwtInterfaceMockRecorder) Decode(tokenString, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockJwtInterface)(nil).Decode), tokenString, claims)
}
