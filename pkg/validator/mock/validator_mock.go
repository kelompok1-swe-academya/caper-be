// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/validator/validator.go
//
// Generated by this command:
//
//	mockgen -source=pkg/validator/validator.go -destination=pkg/validator/mock/validator_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	validator "github.com/ahargunyllib/hackathon-fiber-starter/pkg/validator"
	gomock "go.uber.org/mock/gomock"
)

// MockValidatorInterface is a mock of ValidatorInterface interface.
type MockValidatorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorInterfaceMockRecorder
	isgomock struct{}
}

// MockValidatorInterfaceMockRecorder is the mock recorder for MockValidatorInterface.
type MockValidatorInterfaceMockRecorder struct {
	mock *MockValidatorInterface
}

// NewMockValidatorInterface creates a new mock instance.
func NewMockValidatorInterface(ctrl *gomock.Controller) *MockValidatorInterface {
	mock := &MockValidatorInterface{ctrl: ctrl}
	mock.recorder = &MockValidatorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorInterface) EXPECT() *MockValidatorInterfaceMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidatorInterface) Validate(data any) validator.ValidationErrors {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", data)
	ret0, _ := ret[0].(validator.ValidationErrors)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorInterfaceMockRecorder) Validate(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidatorInterface)(nil).Validate), data)
}
