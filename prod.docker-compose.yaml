services:
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - network
  app:
    image: ahargunyllib/caper-be:latest # ! TODO
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.peaknflow-be.rule=Host(`localhost`)" # ! TODO
      - "traefik.http.routers.peaknflow-be.entrypoints=web"
      - "com.centurylinklabs.watchtower.enable=true"
    env_file: "./config/.env"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 2
    volumes:
      - ./data/logs:/app/data/logs
      - ./config/.env:/app/config/.env
    networks:
      - network
    restart: on-failure
  db:
    image: postgres:16.1-alpine
    container_name: postgresdb
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - PORT=${DB_PORT}
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      start_interval: 5s
      interval: 15s
      timeout: 5s
      retries: 3

volumes:
  postgres:
    driver: local

networks:
  network:
    driver: bridge
